// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OAITest;
//
//    var oaijsonChunk = OaijsonChunk.FromJson(jsonString);

namespace AITranslateServer
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OaijsonChunk
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("object")]
        public string Object { get; set; }

        [JsonProperty("created")]
        public long Created { get; set; }

        [JsonProperty("model")]
        public string Model { get; set; }

        [JsonProperty("choices")]
        public Choice[] Choices { get; set; }
    }

    public partial class Choice
    {
        [JsonProperty("delta")]
        public Delta Delta { get; set; }

        [JsonProperty("index")]
        public long Index { get; set; }

        [JsonProperty("finish_reason")]
        public string FinishReason { get; set; }
    }

    public partial class Delta
    {
        [JsonProperty("role", NullValueHandling = NullValueHandling.Ignore)]
        public string Role { get; set; }

        [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
        public string Content { get; set; }
    }

    public partial class OaijsonChunk
    {
        public static OaijsonChunk FromJson(string json) => JsonConvert.DeserializeObject<OaijsonChunk>(json, AITranslateServer.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OaijsonChunk[] self) => JsonConvert.SerializeObject(self, AITranslateServer.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    public class OAIRequest
    {
        [JsonProperty("model")]
        public string Model { get; set; }
        [JsonProperty("messages")]
        public List<OAIChatMessage> Messages { get; set; }
        [JsonProperty("temperature")]
        public double Temperature { get; set; } = 1.0;
        [JsonProperty("n")]
        public int NumberOfResults { get; set; } = 1;
        [JsonProperty("stream")]
        public bool Stream { get; set; } = false;
        [JsonProperty("max_tokens")]
        public int MaxTokens { get; set; } = 1024;
    }


    public class OAIChatMessage
    {
        // role can be either "system", "user", or "assistant"
        [JsonProperty("role")]
        public string Role { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }
    }
}
